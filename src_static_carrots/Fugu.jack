/** fugu */

class Fugu{


    field int x, y;
    field int fugu_width;
    field int fugu_height;
    field int vert_speed;
    field int hor_speed;

    constructor Fugu new(int Ax, int Ay)
    {
        let x = Ax;
        let y = Ay;
        let fugu_width = 16;
        let fugu_height = 13;
        let vert_speed = 1;
        let hor_speed = 1;
        return this;
    }

    method void dispose()
    {
        do Memory.deAlloc(this);
        return;
    }

    method int getX() {
        return x;
    }
    method int getY () {
        return y;
    }
    method int getHeight(){
        return fugu_height;
    }

    method int get_location(int Ay, int Ax){
        //16-pixel grid
        //256 in height, 32 in width
        if ((Ax > -1) & (Ax < 32) & (Ay > -1) & (Ay + 1 < 16)) { return Ay*32 * 16 + Ax; }
        
        return 52;
    }

    method void set_YX(int new_y, int new_x){
        if ((new_x > -1) & (new_x < 32)) { let x = new_x; }
        if ((new_y > -1) & (new_y + 1 < 16)) { let y = new_y; }
        return;
    }

    method void draw() {
        var int memAddress;
        var int location;
        let location = get_location(y,x);
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 8448);
        do Memory.poke(memAddress + 32, 26560);
        do Memory.poke(memAddress + 64, 14432);
        do Memory.poke(memAddress + 96, 12344);
        do Memory.poke(memAddress + 128, -7160);
        do Memory.poke(memAddress + 160, -16339);
        do Memory.poke(memAddress + 192, 16903);
        do Memory.poke(memAddress + 224, 17294);
        do Memory.poke(memAddress + 256, 24604);
        do Memory.poke(memAddress + 288, 8208);
        do Memory.poke(memAddress + 320, 14392);
        do Memory.poke(memAddress + 352, 3168);
        do Memory.poke(memAddress + 384, 1984);
        return;
    } 
    // каждый регистр можно делать побитовый сдвиг >> или << - разделять каждый регистр надвое 
    // сначала просто 0 * 16 и <регистр>
    // сдвинуться влево: 
    // крч сдвигаемся на половину регистра или на 1/4

    method void erase() {
        var int memAddress;
        var int location;
        let location = get_location(y,x);
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 0);
        do Memory.poke(memAddress + 128, 0);
        do Memory.poke(memAddress + 160, 0);
        do Memory.poke(memAddress + 192, 0);
        do Memory.poke(memAddress + 224, 0);
        do Memory.poke(memAddress + 256, 0);
        do Memory.poke(memAddress + 288, 0);
        do Memory.poke(memAddress + 320, 0);
        do Memory.poke(memAddress + 352, 0);
        do Memory.poke(memAddress + 384, 0);
        return;
    }
    
    
    method void moveUp() {
        if (y > (vert_speed - 1)) {
            do erase_LEGACY(y * 32 * 16 + x);
            let y = y - vert_speed;
            do draw_LEGACY(y * 32 * 16 + x);
        }
        return;
    }

    method void moveDown() {
        if (y + 1 < (16 - vert_speed + 1)) {
            do erase_LEGACY(y * 32 * 16 + x);
            let y = y + vert_speed;
            do draw_LEGACY(y * 32 * 16 + x);
        }
        return;
    }

    method void moveLeft() {
        if (x > 0) {
            do erase_LEGACY(y * 32 * 16 + x);
            let x = x - hor_speed;
            do draw_LEGACY(y * 32 * 16 + x);
        }
        return;
    }

    method void moveRight() {
        if (x < 31) {
            do erase_LEGACY(y * 32 * 16 + x);
            let x = x + hor_speed;
            do draw_LEGACY(y * 32 * 16 + x);
        }
        return;
    }


    method void draw_LEGACY(int location) {
        var int memAddress;
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 8448);
        do Memory.poke(memAddress + 32, 26560);
        do Memory.poke(memAddress + 64, 14432);
        do Memory.poke(memAddress + 96, 12344);
        do Memory.poke(memAddress + 128, -7160);
        do Memory.poke(memAddress + 160, -16339);
        do Memory.poke(memAddress + 192, 16903);
        do Memory.poke(memAddress + 224, 17294);
        do Memory.poke(memAddress + 256, 24604);
        do Memory.poke(memAddress + 288, 8208);
        do Memory.poke(memAddress + 320, 14392);
        do Memory.poke(memAddress + 352, 3168);
        do Memory.poke(memAddress + 384, 1984);
        return;
    }

    method void erase_LEGACY(int location) {
        var int memAddress;
        var int currRowValue;
        let memAddress = 16384 + location;
        let currRowValue = Memory.peek(memAddress + 0);
        do Memory.poke(memAddress + 0, currRowValue - 8448);
        let currRowValue = Memory.peek(memAddress + 32);
        do Memory.poke(memAddress + 32, currRowValue - 26560);
        let currRowValue = Memory.peek(memAddress + 64);
        do Memory.poke(memAddress + 64, currRowValue - 14432);
        let currRowValue = Memory.peek(memAddress + 96);
        do Memory.poke(memAddress + 96, currRowValue - 12344);
        let currRowValue = Memory.peek(memAddress + 128);
        do Memory.poke(memAddress + 128, currRowValue +7160);
        let currRowValue = Memory.peek(memAddress + 160);
        do Memory.poke(memAddress + 160, currRowValue +16339);
        let currRowValue = Memory.peek(memAddress + 192);
        do Memory.poke(memAddress + 192, currRowValue - 16903);
        let currRowValue = Memory.peek(memAddress + 224);
        do Memory.poke(memAddress + 224, currRowValue - 17294);
        let currRowValue = Memory.peek(memAddress + 256);
        do Memory.poke(memAddress + 256, currRowValue - 24604);
        let currRowValue = Memory.peek(memAddress + 288);
        do Memory.poke(memAddress + 288, currRowValue - 8208);
        let currRowValue = Memory.peek(memAddress + 320);
        do Memory.poke(memAddress + 320, currRowValue - 14392);
        let currRowValue = Memory.peek(memAddress + 352);
        do Memory.poke(memAddress + 352, currRowValue - 3168);
        let currRowValue = Memory.peek(memAddress + 384);
        do Memory.poke(memAddress + 384, currRowValue - 1984);
        return;
    }
}