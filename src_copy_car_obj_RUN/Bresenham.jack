class Bresenham {
    /** 
     * Вычисляет следующую точку после (x1, y1) на отрезке к (x2, y2)
     * Результат сохраняется в массив nextXY (x = nextXY[0], y = nextXY[1])
     */
    function void nextPoint(int x1, int y1, int x2, int y2, Array nextXY) {
        var int dx;
        var int dy;
        var int step_x;
        var int step_y;
        var int abs_dx;
        var int abs_dy;
        var boolean mainAxisX;
        var int error;
        var int nextX;
        var int nextY;


        // Если точки совпадают, возвращаем p1
        if ((x1 = x2) & (y1 = y2)) {
            let nextXY[0] = x1;
            let nextXY[1] = y1;
            return;
        }

        
        let dx = x2 - x1;
        let dy = y2 - y1;

        
        // Определяем направление шага по x
        if (dx > 0) {
            let step_x = 1;
        } else {
            if (dx < 0) {
                let step_x = -1;
            } else {
                let step_x = 0;
            }
        }

        // Определяем направление шага по y
        if (dy > 0) {
            let step_y = 1;
        } else {
            if (dy < 0) {
                let step_y = -1;
            } else {
                let step_y = 0;
            }
        }

        
        let abs_dx = Math.abs(dx);
        let abs_dy = Math.abs(dy);

        
        // Выбираем основную ось
        if (abs_dx > abs_dy) {
            let mainAxisX = true;
        } else {
            let mainAxisX = false;
        }

        if (mainAxisX) {
            // Основная ось X
            
            let error = (2 * abs_dy) - abs_dx;

            
            let nextX = x1 + step_x;
            let nextY = y1;

            // Корректируем Y, если ошибка >= 0
            if (error > -1) {
                let nextY = y1 + step_y;
            }

            let nextXY[0] = nextX;
            let nextXY[1] = nextY;
        } else {
            // Основная ось Y
            let error = (2 * abs_dx) - abs_dy;

            
            let nextY = y1 + step_y;
            let nextX = x1;

            // Корректируем X, если ошибка >= 0
            if (error > -1) {
                let nextX = x1 + step_x;
            }

            let nextXY[0] = nextX;
            let nextXY[1] = nextY;
        }

        return;
    }

    
}

// class Bresenham2 {
//     /** 
//      * Возвращает вторую точку после (x1, y1) на отрезке к (x2, y2).
//      * Результат сохраняется в массив nextXY (x = nextXY[0], y = nextXY[1]).
//      * Все локальные переменные объявлены в начале функции.
//      */
//     function void nextSecondPoint(int x1, int y1, int x2, int y2, Array nextXY) {
//         var int dx, dy, step_x, step_y, abs_dx, abs_dy, error, currentX, currentY, i;
//         var boolean mainAxisX, done;

//         // Если точки совпадают, возвращаем p1
//         if ((x1 = x2) & (y1 = y2)) {
//             let nextXY[0] = x1;
//             let nextXY[1] = y1;
//             return;
//         }

//         // Вычисляем разницу координат
//         let dx = x2 - x1;
//         let dy = y2 - y1;

//         // Определяем направление шага по X
//         if (dx > 0) {
//             let step_x = 1;
//         } else {
//             if (dx < 0) {
//                 let step_x = -1;
//             } else {
//                 let step_x = 0;
//             }
//         }

//         // Определяем направление шага по Y
//         if (dy > 0) {
//             let step_y = 1;
//         } else {
//             if (dy < 0) {
//                 let step_y = -1;
//             } else {
//                 let step_y = 0;
//             }
//         }

//         // Абсолютные значения разниц
//         let abs_dx = Math.abs(dx);
//         let abs_dy = Math.abs(dy);

//         // Выбор основной оси
//         if (abs_dx > abs_dy) {
//             let mainAxisX = true;
//         } else {
//             let mainAxisX = false;
//         }

//         // Начальные координаты
//         let currentX = x1;
//         let currentY = y1;

//         // Инициализация ошибки
//         if (mainAxisX) {
//             let error = (2 * abs_dy) - abs_dx;
//         } else {
//             let error = (2 * abs_dx) - abs_dy;
//         }

//         // Флаг достижения конца отрезка
//         let done = false;

//         // Два шага алгоритма
//         let i = 0;
//         while (i < 2) {
//             if (~done) {
//                 if (mainAxisX) {
//                     // Шаг по X
//                     let currentX = currentX + step_x;
//                     let error = error + (2 * abs_dy);

//                     // Коррекция Y
//                     if (error >= 0) {
//                         let currentY = currentY + step_y;
//                         let error = error - (2 * abs_dx);
//                     }
//                 } else {
//                     // Шаг по Y
//                     let currentY = currentY + step_y;
//                     let error = error + (2 * abs_dx);

//                     // Коррекция X
//                     if (error >= 0) {
//                         let currentX = currentX + step_x;
//                         let error = error - (2 * abs_dy);
//                     }
//                 }

//                 // Проверка достижения конечной точки
//                 if ((currentX = x2) & (currentY = y2)) {
//                     let done = true;
//                 }
//             }
//             let i = i + 1;
//         }

//         // Запись результата
//         let nextXY[0] = currentX;
//         let nextXY[1] = currentY;
//         return;
//     }
// }